# object classifier boot.py
# generated by maixhub.com

import sensor, image, lcd, time
import KPU as kpu
import gc, sys

from Maix import utils
import machine

# config change for youself
labels = ["0", "1"] # labels
img_size = [224,224] # img_size
#labels = ['0', '1', '2']
#img_size = [224,224]
board_cube = 1

def lcd_show_except(e):
    import uio
    err_str = uio.StringIO()
    sys.print_exception(e, err_str)
    err_str = err_str.getvalue()
    img = image.Image(size=(img_size[0],img_size[1]))
    img.draw_string(0, 10, err_str, scale=1, color=(0xff,0x00,0x00))
    lcd.display(img)

def main(model_addr="/sd/m.kmodel", sensor_window=(224, 224), lcd_rotation=0, sensor_hmirror=False, sensor_vflip=False):
    def draw_string(img, x, y, text, color, scale, bg=None ):
        if bg:
            img.draw_rectangle(x-2,y-2, len(text)*8*scale+4 , 16*scale, fill=True, color=bg)
        img = img.draw_string(x, y, text, color=color,scale=scale)
        return img

    sensor.reset()
    sensor.set_pixformat(sensor.RGB565)
    sensor.set_framesize(sensor.QVGA)
    sensor.set_windowing((img_size[0], img_size[1]))
    sensor.set_hmirror(sensor_hmirror)
    sensor.set_vflip(sensor_vflip)

    if board_cube == 1:
        sensor.set_vflip(True)
        sensor.set_hmirror(True)
        lcd.init(type=2)
        lcd.rotation(2)
    else:
        lcd.init()
        lcd.rotation(lcd_rotation)

    sensor.run(1)
    print("AA start run")
    lcd.clear(lcd.WHITE)
    task = kpu.load(model_addr)
    a = kpu.set_outputs(task, 0, 2, 1, 1)
    try:
        while(True):
            img = sensor.snapshot()
            if board_cube:
               img = img.resize(img_size[0], img_size[1])
               img = img.rotation_corr(z_rotation=90)
               img.pix_to_ai()

            t = time.ticks_ms()
            fmap = kpu.forward(task, img)
            t = time.ticks_ms() - t
            plist=fmap[:]
            pmax=max(plist)
            print("plist:",plist)
            if pmax > 0.7 : # 0.6 = 60%
                max_index=plist.index(pmax)
                print(labels[max_index])
                img = draw_string(img, 2, 2, " C: %s P: %.2f" % (labels[max_index], pmax), color=lcd.WHITE,scale=2, bg=lcd.RED)
            img.draw_string(0, 200, "imgN t:%dms" %(t), color=lcd.RED,scale=2)
            lcd.display(img)
            time.sleep_ms(100)

    except Exception as e:
        raise e
    finally:
        kpu.deinit(task)

if __name__ == "__main__":
    try:
        #main( model_addr=0x300000)
        main(model_addr="/sd/m.kmodel")
    except Exception as e:
        sys.print_exception(e)
        lcd_show_except(e)
    finally:
        gc.collect()
